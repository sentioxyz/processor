syntax = "proto3";

package processor;

import "google/protobuf/empty.proto";

option go_package = "sentioxyz/sentio/processor";

service Processor {
  rpc GetConfig(ProcessConfigRequest) returns (ProcessConfigResponse);
  rpc Start(StartRequest) returns (google.protobuf.Empty);
  rpc Stop(google.protobuf.Empty) returns (google.protobuf.Empty);

  // This only applies to EVM-compatible chain
  rpc ProcessLog(ProcessLogRequest) returns (ProcessLogResponse);
  rpc ProcessTransaction(ProcessTransactionRequest) returns (ProcessTransactionResponse);
  rpc ProcessBlock(ProcessBlockRequest) returns (ProcessBlockResponse);
  rpc ProcessInstruction(ProcessInstructionRequest) returns (ProcessInstructionResponse);
}

message ProjectConfig {
  string name = 1;
  string version = 3;
}

message ProcessConfigRequest {
}

message ProcessConfigResponse {
  ProjectConfig config = 1;
  repeated ContractConfig contract_configs = 2;
  repeated TemplateInstance template_instances = 3;
}

message ContractConfig {
  ContractInfo contract = 1;
  BlockHandlerConfig block_config = 2; // may not needed
  repeated LogHandlerConfig log_configs = 3;
  uint64 start_block = 4;
  uint64 end_block = 5;
//  int32 chunk_size = 6;
  InstructionHandlerConfig instruction_config = 6;
}

message ContractInfo {
  string name = 1;
  // should this be more flexible?
  string chain_id = 2;
  string address = 3;
  string abi = 4;
}

message TemplateInstance {
  ContractInfo contract = 1;
  uint64 start_block = 2;
  uint64 end_block = 3;
  int32 template_id = 4;
}

message StartRequest {
    repeated TemplateInstance template_instances = 1;
}

message BlockHandlerConfig {
  int32 num_handlers = 1;
}

message LogHandlerConfig {
  repeated HandlerCondition conditions = 1;
  int32 handler_id = 2;
}

message HandlerCondition {
  repeated Topic topics = 1;
}

message InstructionHandlerConfig {
  bool processInnerInstruction = 1;
}

message Topic {
  repeated string hashes = 1;
}

message ProcessLogRequest {
  repeated LogBinding logs = 1;
}

message ProcessLogResponse {
  O11yResult result = 1;
  // Whether config update because of dynamic contract processor creation
  bool config_updated = 4;
}

message ProcessTransactionRequest {
  Transaction transaction = 1;
}

message ProcessInstructionRequest {
  repeated Instruction instructions = 1;
}

message ProcessTransactionResponse {
  O11yResult result = 1;
}

message ProcessInstructionResponse {
  O11yResult result = 1;
}

message ProcessBlockRequest {
  Block block = 1;
  string chain_id = 2;
}

message ProcessBlockResponse {
  O11yResult result = 1;
}

message LogBinding {
  Log log = 1;
  int32 handler_id = 2;
  //  int32 chain_id = 3; // not sure if we need in the future
}

message Log {
  bytes raw = 1;
}

message Transaction {
  string tx_hash = 1;
  bytes raw = 2;
  string program_account_id = 3;
}

message Instruction {
  string instruction_data = 1;
  uint64 slot = 2;
  string program_account_id = 3;
  optional bytes parsed = 4;
}

message Block {
  bytes raw = 1;
}

message O11yResult {
  repeated HistogramResult histograms = 1;
  repeated CounterResult counters = 2;
}

message RecordMetaData {
  // These are populated by systems.
  string contract_address = 1;
  uint64 block_number = 2; // TODO discuss if we need this if we send request per block
  int32 transaction_index = 3;
  int32 log_index = 4;
  string chain_id = 5;

  // These are populated by users in meter.
  // The metric name.
  string name = 6;
  // The metric labels provided by users.
  map<string, string> labels = 7;
}

message MetricValue {
  oneof value {
    string big_int = 1;
    double double_value = 2;
  }
}

message HistogramResult {
  RecordMetaData metadata = 1;
  MetricValue metric_value = 2;
}

message CounterResult {
  RecordMetaData metadata = 1;
  MetricValue metric_value = 2;
  // True to increase or False to decrease
  bool add = 3;
}
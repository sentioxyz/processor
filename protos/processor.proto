syntax = "proto3";

package processor;

import "google/protobuf/empty.proto";

option go_package = "sentioxyz/sentio/processor/protos";

service Processor {
  // Start the processor, need to be called before any other RPC calls
  rpc Start(StartRequest) returns (google.protobuf.Empty);
  // Stop the processor
  rpc Stop(google.protobuf.Empty) returns (google.protobuf.Empty);
  // Get configs of processor, it will be updated automatically if new contracts is added
  // during log processing
  rpc GetConfig(ProcessConfigRequest) returns (ProcessConfigResponse);

  // This only applies to EVM-compatible chain
  // Process a list of logs associate with their handler id
  // Logs will be ordered by their creation time, the caller should also guarantee
  // It will also return a flag indicate if new contract config is added during the process
  rpc ProcessLogs(ProcessLogsRequest) returns (ProcessLogsResponse);

  // Not implemented yet
  rpc ProcessTransactions(ProcessTransactionsRequest) returns (ProcessTransactionsResponse);

  // Process a list of blocks associate with their handler id
  // No particular order is assumed for the list of blocks
  rpc ProcessBlocks(ProcessBlocksRequest) returns (ProcessBlocksResponse);

  rpc ProcessInstructions(ProcessInstructionsRequest) returns (ProcessInstructionsResponse);
}

message ProjectConfig {
  string name = 1;
  string version = 3;
}

message ProcessConfigRequest {
}

message ProcessConfigResponse {
  ProjectConfig config = 1;
  repeated ContractConfig contract_configs = 2;
  repeated TemplateInstance template_instances = 3;
}

message ContractConfig {
  ContractInfo contract = 1;
  repeated BlockHandlerConfig block_configs = 7;
  repeated LogHandlerConfig log_configs = 3;
  uint64 start_block = 4;
  uint64 end_block = 5;
  InstructionHandlerConfig instruction_config = 6;

  string processor_type = 8;
}

message ContractInfo {
  string name = 1;
  // should this be more flexible?
  string chain_id = 2;
  string address = 3;
  string abi = 4;
}

message TemplateInstance {
  ContractInfo contract = 1;
  uint64 start_block = 2;
  uint64 end_block = 3;
  int32 template_id = 4;
}

message StartRequest {
  repeated TemplateInstance template_instances = 1;
}

// deprecate, TODO to be deteled
message OldBlockHandlerConfig {
  int32 num_handlers = 1;
}

message BlockHandlerConfig {
  int32 handler_id = 1;
}

message LogHandlerConfig {
  repeated LogFilter filters = 1;
  int32 handler_id = 2;
}

message LogFilter {
  repeated Topic topics = 1;
}

message InstructionHandlerConfig {
  bool inner_instruction = 1;
  bool parsed_instruction = 2;
  bool raw_data_instruction = 3;
}

message Topic {
  repeated string hashes = 1;
}

message ProcessLogsRequest {
  repeated LogBinding log_bindings = 1;
}

message ProcessLogsResponse {
  O11yResult result = 1;
  // Whether config update because of dynamic contract processor creation
  bool config_updated = 4;
}

message ProcessTransactionsRequest {
  Transaction transaction = 1;
}

message ProcessInstructionsRequest {
  repeated Instruction instructions = 1;
}

message ProcessTransactionsResponse {
  O11yResult result = 1;
}

message ProcessInstructionsResponse {
  O11yResult result = 1;
}

message ProcessBlocksRequest {
  repeated BlockBinding block_bindings = 2;
}

message ProcessBlocksResponse {
  O11yResult result = 2;
}

message LogBinding {
  Log log = 1;
  int32 handler_id = 2;
}

message Log {
  bytes raw = 1;
}

message Transaction {
  string tx_hash = 1;
  bytes raw = 2;
  string program_account_id = 3;
}

message Instruction {
  string instruction_data = 1;
  uint64 slot = 2;
  string program_account_id = 3;
  optional bytes parsed = 4;
}

message BlockBinding {
  Block block = 1;
  repeated int32 handler_ids = 2; // TODO consider make log binds contain list of handler id as well
  string chain_id = 3; // TODO remove this
}

message Block {
  bytes raw = 1;
}

message O11yResult {
  repeated GaugeResult gauges = 1;
  repeated CounterResult counters = 2;
}

message RecordMetaData {
  // These are populated by systems.
  string contract_address = 1;
  uint64 block_number = 2; // TODO discuss if we need this if we send request per block
  int32 transaction_index = 3;
  int32 log_index = 4;
  string chain_id = 5;

  // These are populated by users in meter.
  // The metric name.
  string name = 6;
  // The metric labels provided by users.
  map<string, string> labels = 7;
}

message MetricValue {
  oneof value {
    string big_decimal = 1;
    double double_value = 2;
    BigInteger big_integer = 3;
  }
}

message BigInteger {
  bool negative = 1;
  bytes data = 2;
}

enum HandlerType {
  UNKNOWN = 0;
  LOG = 1;
  BLOCK = 2;
  TRANSACTION = 3;
  INSTRUCTION = 4;
}

message RuntimeInfo {
  HandlerType from = 1;
}

message GaugeResult {
  RecordMetaData metadata = 1;
  MetricValue metric_value = 2;
  RuntimeInfo runtime_info = 3;
}

message CounterResult {
  RecordMetaData metadata = 1;
  MetricValue metric_value = 2;
  // True to increase or False to decrease
  bool add = 3;
  RuntimeInfo runtime_info = 4;
}
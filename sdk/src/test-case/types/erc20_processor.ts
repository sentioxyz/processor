/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { CallOverrides } from "ethers";
import { Networkish } from "@ethersproject/providers";
import {
  addContractByABI,
  getContractByABI,
  addProcessor,
  getProcessor,
  getProvider,
  transformEtherError,
  BindOptions,
  BaseProcessor,
  BaseProcessorTemplate,
  Context,
  ContractWrapper,
  DummyProvider,
  getContractName,
} from "@sentio/sdk";
import { PromiseOrValue } from "./common";
import { Erc20, Erc20__factory } from "./index";
import {
  ApprovalEvent,
  ApprovalEventFilter,
  TransferEvent,
  TransferEventFilter,
} from "./Erc20";
const templateContract = Erc20__factory.connect("", DummyProvider);

class Erc20ContractWrapper extends ContractWrapper<Erc20> {
  constructor(contract: Erc20) {
    super(contract);
  }

  async allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ) {
    try {
      if (!overrides) {
        overrides = {
          blockTag: this.context.blockNumber.toNumber(),
        };
      }
      return await this.contract.allowance(owner, spender, overrides);
    } catch (e) {
      throw transformEtherError(e, this.context);
    }
  }

  async balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides) {
    try {
      if (!overrides) {
        overrides = {
          blockTag: this.context.blockNumber.toNumber(),
        };
      }
      return await this.contract.balanceOf(account, overrides);
    } catch (e) {
      throw transformEtherError(e, this.context);
    }
  }

  async decimals(overrides?: CallOverrides) {
    try {
      if (!overrides) {
        overrides = {
          blockTag: this.context.blockNumber.toNumber(),
        };
      }
      return await this.contract.decimals(overrides);
    } catch (e) {
      throw transformEtherError(e, this.context);
    }
  }

  async totalSupply(overrides?: CallOverrides) {
    try {
      if (!overrides) {
        overrides = {
          blockTag: this.context.blockNumber.toNumber(),
        };
      }
      return await this.contract.totalSupply(overrides);
    } catch (e) {
      throw transformEtherError(e, this.context);
    }
  }
}

export type Erc20Context = Context<Erc20, Erc20ContractWrapper>;

export class Erc20ProcessorTemplate extends BaseProcessorTemplate<
  Erc20,
  Erc20ContractWrapper
> {
  bindInternal(options: BindOptions) {
    let processor = getProcessor("Erc20", options) as Erc20Processor;
    if (!processor) {
      const wrapper = getErc20Contract(options.address, options.network);
      const finalOptions = Object.assign({}, options);
      finalOptions.name = getContractName(
        "Erc20",
        options.name,
        options.address,
        options.network
      );
      processor = new Erc20Processor(finalOptions, wrapper);
      addProcessor("Erc20", options, processor);
    }
    return processor;
  }

  onApproval(
    handler: (event: ApprovalEvent, ctx: Erc20Context) => void,
    filter?: ApprovalEventFilter | ApprovalEventFilter[]
  ) {
    if (!filter) {
      filter = Erc20Processor.filters["Approval(address,address,uint256)"](
        null,
        null,
        null
      );
    }
    return super.onEvent(handler, filter);
  }

  onTransfer(
    handler: (event: TransferEvent, ctx: Erc20Context) => void,
    filter?: TransferEventFilter | TransferEventFilter[]
  ) {
    if (!filter) {
      filter = Erc20Processor.filters["Transfer(address,address,uint256)"](
        null,
        null,
        null
      );
    }
    return super.onEvent(handler, filter);
  }
}

export class Erc20Processor extends BaseProcessor<Erc20, Erc20ContractWrapper> {
  onApproval(
    handler: (event: ApprovalEvent, ctx: Erc20Context) => void,
    filter?: ApprovalEventFilter | ApprovalEventFilter[]
  ) {
    if (!filter) {
      filter = Erc20Processor.filters["Approval(address,address,uint256)"](
        null,
        null,
        null
      );
    }
    return super.onEvent(handler, filter);
  }

  onTransfer(
    handler: (event: TransferEvent, ctx: Erc20Context) => void,
    filter?: TransferEventFilter | TransferEventFilter[]
  ) {
    if (!filter) {
      filter = Erc20Processor.filters["Transfer(address,address,uint256)"](
        null,
        null,
        null
      );
    }
    return super.onEvent(handler, filter);
  }

  public static filters = templateContract.filters;

  public static bind(options: BindOptions): Erc20Processor {
    let processor = getProcessor("Erc20", options) as Erc20Processor;
    if (!processor) {
      const wrapper = getErc20Contract(options.address, options.network);

      const finalOptions = Object.assign({}, options);
      finalOptions.name = getContractName(
        "Erc20",
        options.name,
        options.address,
        options.network
      );
      processor = new Erc20Processor(finalOptions, wrapper);
      addProcessor("Erc20", options, processor);
    }
    return processor;
  }
}

export function getErc20Contract(
  address: string,
  network: Networkish = 1
): Erc20ContractWrapper {
  let contract = getContractByABI(
    "Erc20",
    address,
    network
  ) as Erc20ContractWrapper;
  if (!contract) {
    const rawContract = Erc20__factory.connect(address, getProvider(network));
    contract = new Erc20ContractWrapper(rawContract);
    addContractByABI("Erc20", address, network, contract);
  }
  return contract;
}

// export const Erc20Processor = new Erc20ProcessorTemplate("Erc20")

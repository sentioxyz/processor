/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  getProvider,
  transformEtherError,
  BindOptions,
  BaseProcessor,
  BaseProcessorTemplate,
  Context,
  ContractWrapper,
  ContractNamer,
  DummyProvider,
} from "@sentio/sdk";
import { PromiseOrValue } from "./common";
import { Erc20, Erc20__factory } from "./index";
import {
  ApprovalEvent,
  ApprovalEventFilter,
  TransferEvent,
  TransferEventFilter,
} from "./Erc20";
const namer = new ContractNamer("Erc20");
const templateContract = Erc20__factory.connect("", DummyProvider);

class Erc20ContractWrapper extends ContractWrapper<Erc20> {
  constructor(contract: Erc20) {
    super(contract);
  }

  async allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>
  ) {
    try {
      return await this.contract.allowance(owner, spender, {
        blockTag: this.context.blockNumber.toNumber(),
      });
    } catch (e) {
      throw transformEtherError(e, this.context);
    }
  }

  async balanceOf(account: PromiseOrValue<string>) {
    try {
      return await this.contract.balanceOf(account, {
        blockTag: this.context.blockNumber.toNumber(),
      });
    } catch (e) {
      throw transformEtherError(e, this.context);
    }
  }

  async decimals() {
    try {
      return await this.contract.decimals({
        blockTag: this.context.blockNumber.toNumber(),
      });
    } catch (e) {
      throw transformEtherError(e, this.context);
    }
  }

  async totalSupply() {
    try {
      return await this.contract.totalSupply({
        blockTag: this.context.blockNumber.toNumber(),
      });
    } catch (e) {
      throw transformEtherError(e, this.context);
    }
  }
}

export type Erc20Context = Context<Erc20, Erc20ContractWrapper>;

export class Erc20ProcessorTemplate extends BaseProcessorTemplate<
  Erc20,
  Erc20ContractWrapper
> {
  bindInternal(options: BindOptions) {
    const contract = Erc20__factory.connect(
      options.address,
      getProvider(options.network)
    );
    const wrapper = new Erc20ContractWrapper(contract);
    if (!options.name) {
      options.name = namer.nextName();
    }
    return new Erc20Processor(options, wrapper);
  }

  onApproval(
    handler: (event: ApprovalEvent, ctx: Erc20Context) => void,
    filter?: ApprovalEventFilter | ApprovalEventFilter[]
  ) {
    if (!filter) {
      filter = Erc20Processor.filters["Approval(address,address,uint256)"](
        null,
        null,
        null
      );
    }
    return super.onEvent(handler, filter);
  }

  onTransfer(
    handler: (event: TransferEvent, ctx: Erc20Context) => void,
    filter?: TransferEventFilter | TransferEventFilter[]
  ) {
    if (!filter) {
      filter = Erc20Processor.filters["Transfer(address,address,uint256)"](
        null,
        null,
        null
      );
    }
    return super.onEvent(handler, filter);
  }
}

export class Erc20Processor extends BaseProcessor<Erc20, Erc20ContractWrapper> {
  onApproval(
    handler: (event: ApprovalEvent, ctx: Erc20Context) => void,
    filter?: ApprovalEventFilter | ApprovalEventFilter[]
  ) {
    if (!filter) {
      filter = Erc20Processor.filters["Approval(address,address,uint256)"](
        null,
        null,
        null
      );
    }
    return super.onEvent(handler, filter);
  }

  onTransfer(
    handler: (event: TransferEvent, ctx: Erc20Context) => void,
    filter?: TransferEventFilter | TransferEventFilter[]
  ) {
    if (!filter) {
      filter = Erc20Processor.filters["Transfer(address,address,uint256)"](
        null,
        null,
        null
      );
    }
    return super.onEvent(handler, filter);
  }

  public static filters = templateContract.filters;

  public static bind(options: BindOptions): Erc20Processor {
    const contract = Erc20__factory.connect(
      options.address,
      getProvider(options.network)
    );
    const wrapper = new Erc20ContractWrapper(contract);

    if (!options.name) {
      options.name = namer.nextName();
    }
    return new Erc20Processor(options, wrapper);
  }
}

// export const Erc20Processor = new Erc20ProcessorTemplate("Erc20")
